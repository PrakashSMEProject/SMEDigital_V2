//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : RiskGroup.java
//  @ Date : 12/20/2011
//  @ Author : 
//
//



package com.rsaame.pas.vo.bus;

/** This interface represents a risk group like a location or a section. */
public interface RiskGroup{
	/**
	 * Returns an id that identifies this instance of the risk group. This may be a temporary Id
	 * in the case of UI management or from the database, if applicable. In any case, the Id is 
	 * expected to be unique across risk group instances. Eg, each location will have its own Id.
	 *  
	 * @return An Id associated to the risk group instance like a location
	 */
	public String getRiskGroupId();
	
	/**
	 * Sets an id that identifies this instance of the risk group. This may be a temporary Id
	 * in the case of UI management or from the database, if applicable. In any case, the Id is 
	 * expected to be unique across risk group instances. Eg, each location will have its own Id.
	 * 
	 * @param rgId The id to be assigned to the RiskGroup instance
	 */
	public void setRiskGroupId( String rgId );
	
	/**
	 * Returns the uniquely identifiable and business name of the risk group instance. Usually, this
	 * will be the formal name of the risk group instance. Eg, "DUBAI MALL".
	 * 
	 * @return The uniquely identifiable and business name of the risk group instance.
	 */
	public String getRiskGroupName();
	
	/**
	 * Sets the uniquely identifiable and business name of the risk group instance. Usually, this
	 * will be the formal name of the risk group instance. Eg, "DUBAI MALL".
	 * 
	 * @param rgName The name for the RiskGroup instance
	 */
	public void setRiskGroupName( String rgName );
	
	/**
	 * Returns a flag indicating that the risk group has been saved or not.
	 * @return
	 */
	public Boolean getToSave();
	
	/**
	 * Set a flag to indicate if the risk group has been saved.
	 * @param toSave
	 */
	public void setToSave( Boolean toSave );
	
	/**
	 * Returns a copy of this object. This is required in the case of locations being copied from PAR or 
	 * PL to other sections.
	 * @return
	 */
	public RiskGroup copy();
	
	/**
	 * Merges data from the passed <code>otherRG</code> into this object. If both objects have a field populated, this object's
	 * field value will be retained.
	 * @return
	 */
	public void merge( RiskGroup otherRG );
	
	/**
	 * Returns a flag to indicate whether location is active or not
	 * @return
	 */
	public String getActiveStatus();
	
	/**
	 * Set a flag to indicate whether location is active or not
	 * @param activeStatus
	 */
	public void setActiveStatus(String activeStatus);
}
