//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : LocationVO.java
//  @ Date : 12/20/2011
//  @ Author : 
//
//
package com.rsaame.pas.vo.bus;

import java.util.Date;

import com.mindtree.ruc.cmn.base.BaseVO;
import com.mindtree.ruc.cmn.utils.Utils;


public class LocationVO extends BaseVO implements RiskGroup,java.io.Serializable {//,Comparable<LocationVO>{
	private static final long serialVersionUID = 1L;
	
	private LocationAddressVO address;
	private Integer occTradeGroup;
	private Integer directorate;
	private String freeZone;
	private String freeZoneOthers;
	private Integer emirates;
	private Date validitySrtDt;
	private Long hazardLevel;
	
	/* Risk group id and name. */
	private String riskGroupId;
	private String riskGroupName;
	private boolean isModified; 
	private String activeStatus;
	
	public boolean isModified() {
		return isModified;
	}

	public void setModified(boolean isModified) {
		this.isModified = isModified;
	}

	private Boolean toSave = Boolean.FALSE;
	
	public Object getFieldValue( String fieldName ){
		Object fieldValue = null;

		if( "address".equals( fieldName ) ) fieldValue = getAddress();
		if( "occTradeGroup".equals( fieldName ) ) fieldValue = getOccTradeGroup();
		if( "freeZone".equals( fieldName ) ) fieldValue = getFreeZone();
		if( "freeZoneOthers".equals( fieldName ) ) fieldValue = getFreeZoneOthers();
		if( "emirates".equals( fieldName ) ) fieldValue = getEmirates();
		if( "riskGroupId".equals( fieldName ) ) fieldValue = getRiskGroupId();
		if( "riskGroupName".equals( fieldName ) ) fieldValue = getRiskGroupName();
		if( "directorate".equals( fieldName ) ) fieldValue = getDirectorate();
		if( "validitySrtDt".equals( fieldName ) ) fieldValue = getValiditySrtDt();
		if(	"isModified".equals(fieldName))fieldValue =isModified();
		if(	"hazardLevel".equals(fieldName))fieldValue =getHazardLevel();
		return fieldValue;
	}
	
	public LocationAddressVO getAddress(){
		return address;
	}
	public void setAddress( LocationAddressVO address ){
		this.address = address;
	}
	public String getFreeZone(){
		return freeZone;
	}
	public void setFreeZone( String freeZone ){
		this.freeZone = freeZone;
	}
	public String getFreeZoneOthers(){
		return freeZoneOthers;
	}
	public void setFreeZoneOthers( String freeZoneOthers ){
		this.freeZoneOthers = freeZoneOthers;
	}
	@Override
	public String getRiskGroupId(){
		return this.riskGroupId;
	}

	@Override
	public String getRiskGroupName(){
		return this.riskGroupName;
	}

	@Override
	public void setRiskGroupId( String riskGroupId ){
		this.riskGroupId = riskGroupId;
	}

	@Override
	public void setRiskGroupName( String riskGroupName ){
		this.riskGroupName = riskGroupName;
	}

	public Integer getOccTradeGroup() {
		return occTradeGroup;
	}

	public void setOccTradeGroup(Integer occTradeGroup) {
		this.occTradeGroup = occTradeGroup;
	}

	public Integer getEmirates() {
		return emirates;
	}

	public void setEmirates(Integer emirates) {
		this.emirates = emirates;
	}

	/**
	 * @return the toSave
	 */
	@Override
	public Boolean getToSave() {
		return toSave;
	}

	/**
	 * @param toSave the toSave to set
	 */
	@Override
	public void setToSave(Boolean toSave) {
		this.toSave = toSave;
	}

	
	/**
	 * @return the directorate
	 */
	public Integer getDirectorate() {
		return directorate;
	}

	/**
	 * @param directorate the directorate to set
	 */
	public void setDirectorate(Integer directorate) {
		this.directorate = directorate;
	}
	
	

	/**
	 * @return the validitySrtDt
	 */
	public Date getValiditySrtDt(){
		return validitySrtDt;
	}

	/**
	 * @param validitySrtDt the validitySrtDt to set
	 */
	public void setValiditySrtDt( Date validitySrtDt ){
		this.validitySrtDt = validitySrtDt;
	}

	/**
	 * @return the activeStatus
	 */
	public String getActiveStatus(){
		return activeStatus;
	}

	/**
	 * @param activeStatus the activeStatus to set
	 */
	public void setActiveStatus( String activeStatus ){
		this.activeStatus = activeStatus;
	}
	public Long getHazardLevel(){
		return hazardLevel;
	}

	public void setHazardLevel( Long hazardLevel ){
		this.hazardLevel = hazardLevel;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return "LocationVO [address=" + address + ", occTradeGroup="
				+ occTradeGroup + ", freeZone=" + freeZone
				+ ", freeZoneOthers=" + freeZoneOthers + ", emirates="
				+ emirates + ", riskGroupId=" + riskGroupId
				+ ", riskGroupName=" + riskGroupName + ", toSave=" + toSave
				+ ", hazardLevel=" + hazardLevel + "]";
	}

	@Override
	public int hashCode() {
		/* TODO Need to create a new field that will be initialised with a unique value, like, a running sequence number. */
		
		/* The unique identifier for this VO is the riskGroupId. Hence, .equals() works on this field. Ideally, we should be able
		 * to return a hashCode that is one-for-one for the riskGroupId.
		 * 
		 * However, we have a difficulty there. In the case of LocationVO, the value of the riskGroupId itself changes during the 
		 * instance's life-cycle. When a location's data is submitted for the first time, the riskGroupId would not have been 
		 * generated (which is, using a database sequence). Hence, we have to provide it a temporary value, which is in the format "L#".
		 * 
		 * If the location is saved successfully, we update this value to the generated sequence number. Since the value changes, 
		 * we can't depend on this field for generating the hashCode because the HashMap instance will not be able to locate the 
		 * key since the bucket would have changed. 
		 * 
		 * Hence, this is being set for now to a constant 1. This will not affect the performance too much since we will never have
		 * too many instances in a HashMap of this as the key. (Please see the TO DO comment above on the future action, if a change
		 * must be performed.) */
		return 1;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals( Object obj ){
		boolean equal = false;

		equalsCheck: {
			if( Utils.isEmpty( obj ) || !( obj instanceof LocationVO ) ) break equalsCheck;

			LocationVO theOtherVO = (LocationVO) obj;
			if( Utils.isEmpty( this.getRiskGroupId() ) && Utils.isEmpty( theOtherVO.getRiskGroupId() ) ){
				equal = true;
				break equalsCheck;
			}
			
			if( !Utils.isEmpty( this.getRiskGroupId() ) ){
				equal = this.riskGroupId.equalsIgnoreCase( theOtherVO.getRiskGroupId() );
			}
		}

		return equal;
	}

	@Override
	public LocationVO copy(){
		LocationVO copy = new LocationVO();
		
		if( !Utils.isEmpty( this.address ) ) copy.address = this.address.copy();
		copy.occTradeGroup = this.occTradeGroup;
		copy.directorate = this.directorate;
		copy.freeZone = this.freeZone;
		copy.freeZoneOthers = this.freeZoneOthers;
		copy.emirates = this.emirates;
		copy.riskGroupId = this.riskGroupId;
		copy.riskGroupName = this.riskGroupName;
		copy.validitySrtDt = this.validitySrtDt;
		
		return copy;
	}

	@Override
	public void merge( RiskGroup otherVO ){
		if( Utils.isEmpty( otherVO ) ) return;
		
		LocationVO otherRG = (LocationVO) otherVO;
		if( Utils.isEmpty( this.address ) ) {
			this.address = otherRG.address;
		}else{
			this.address.merge( otherRG.address );
		}
		if( Utils.isEmpty( this.occTradeGroup ) ) this.occTradeGroup = otherRG.occTradeGroup;
		if( Utils.isEmpty( this.directorate ) ) this.directorate = otherRG.directorate;
		if( Utils.isEmpty( this.freeZone ) ) this.freeZone = otherRG.freeZone;
		if( Utils.isEmpty( this.freeZoneOthers ) ) this.freeZoneOthers = otherRG.freeZoneOthers;
		if( Utils.isEmpty( this.emirates ) ) this.emirates = otherRG.emirates;
		if( Utils.isEmpty( this.riskGroupId ) ) this.riskGroupId = otherRG.riskGroupId;
		if( Utils.isEmpty( this.riskGroupName ) ) this.riskGroupName = otherRG.riskGroupName;
		if( Utils.isEmpty( this.validitySrtDt ) ) this.validitySrtDt = otherRG.validitySrtDt;
	}
	
	/* Request ID : 166761
	 * The below compareTo Overridden function is commented, Comparable implementation commented and the same logic 
	 * is kept inside the file LocationVOComparator.java and this is done as per JAVA8 HashMap changes.
	 */
	
	/*@Override
	public int compareTo( LocationVO o ){
		if(Long.valueOf(this.getRiskGroupId()).longValue()< Long.valueOf(o.getRiskGroupId()).longValue())
		return -1;
		if (Long.valueOf(this.getRiskGroupId()).longValue()== Long.valueOf(o.getRiskGroupId()).longValue())
			return 0;
		else
			return 1;
	}*/

	
}
